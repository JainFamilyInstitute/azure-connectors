from typing import Any, Type

from azure_connectors.utils import split_init_kwargs

from .typing import ClientSettingsProtocol, ModelProtocol


def get_client_kwargs_from_settings(
    kwargs: dict[str, Any], settings_class: Type[ClientSettingsProtocol]
) -> dict[str, Any]:
    """
    Logic for sensible handling of passed keyword arguments for from_env:
        - any keyword arguments that match Settings class properties are passed to the settings class.
        - Settings class is initialized with those properties and used to generate client settings.
        - Remaining keyword arguments are treated as client settings arguments; if they match any keywords from
          settings generated by the Settings class, they override the generated settings.

    Args:
        kwargs: Passed keyword arguments for from_env.
        settings_class: The settings class to use for generating client keyword arguments.

    Returns:
        dict[str, Any]: The keyword arguments to pass on to the client class constructor.
    """
    settings_kwargs, base_kwargs = split_init_kwargs(kwargs, settings_class)
    settings = settings_class(**settings_kwargs)
    client_kwargs = add_model_dump_to_kwargs(base_kwargs, settings)
    client_kwargs.update(base_kwargs)

    return client_kwargs

def get_client_kwargs_from_credential(
        kwargs: dict[str, Any], credential_adapter: ModelProtocol
): ...

def add_model_dump_to_kwargs(kwargs: dict[str, Any], model: ModelProtocol):
    """
    Adds the model dump to the given keyword arguments. Existing keys will not be overwritten.

    Args:
        kwargs (dict[str, Any]): The keyword arguments to which the model dump will be added.
        model (ModelProtocol): The model object from which the dump will be extracted.

    Returns:
        dict[str, Any]: The updated keyword arguments with the model dump added.
    """
    model_kwargs = model.model_dump()
    model_kwargs.update(kwargs)
    return model_kwargs